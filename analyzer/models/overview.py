from django.utils import  timezone

from django.db import models
from django.utils.translation import gettext_lazy as _

from .version_info import VersionInfo
from .header import Header
from .mitre_attack import MitreAttack
from .string import String
from .section import Section
from .target import Target


class Sandbox(models.TextChoices):
    CUCKOO = "Cuckoo", _("Cuckoo")
    HYBRID_ANALYSIS = "Hybrid_Analysis", _("Hybrid_Analysis"),
    FILE_SCAN_IO = "FileScanIO", _("FileScanIO"),
    VIRUS_TOTAL = "Virus_Total", _("Virus_Total")


class Overview(models.Model):
    target = models.ForeignKey(Target, on_delete=models.CASCADE, null=True)
    sandbox = models.CharField(max_length=30, choices=Sandbox.choices, default=Sandbox.CUCKOO)
    size = models.IntegerField(default=0, blank=True)
    job_id = models.CharField(max_length=80, default="", blank=True)
    type = models.CharField(max_length=100, default="", blank=True)
    MD5 = models.CharField(max_length=32, default="", blank=True)
    SHA1 = models.CharField(max_length=41, default="", blank=True)
    SHA256 = models.CharField(max_length=68, default="", blank=True)
    SHA512 = models.CharField(max_length=128, default="", blank=True)
    CRC32 = models.CharField(max_length=10, default="", blank=True)
    compile_time = models.CharField(max_length=40, default="", blank=True)
    submission_time = models.DateTimeField(null=True, blank=True)
    ssdeep = models.CharField(max_length=70, default="", blank=True)
    impash = models.CharField(max_length=32, default="", blank=True)
    authenti_hash = models.CharField(max_length=64, default="", blank=True)
    fuzzy_hash = models.CharField(max_length=64, default="", blank=True)
    verdict = models.CharField(max_length=30, default="", blank=True)
    strings = models.ManyToManyField(String)
    sections = models.ManyToManyField(Section)
    header = models.ForeignKey(Header, on_delete=models.CASCADE, null=True)
    version_info = models.ManyToManyField(VersionInfo, null=True)
    mitre_attacks = models.ManyToManyField(MitreAttack, null=True)


    @property
    def get_fields(self):
        return [(field.name, getattr(self, field.name)) for field in self._meta.get_fields()]
