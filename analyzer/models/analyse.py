import enum

from django.contrib.postgres.fields import ArrayField
from django.db import models
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from .target import Target


def for_django(cls):
    cls.do_not_call_in_templates = True
    return cls


@for_django
class Sandbox(enum.Enum):
    CUCKOO = "Cuckoo"
    HYBRID_ANALYSIS = "Hybrid Analysis"
    FILE_IO = "FileIO"

    @classmethod
    def choices(cls):
        return [(key.value, key.name) for key in cls]


class Analyse(models.Model):
    class Meta:
        verbose_name = _("analyse_sandbox")
        verbose_name_plural = _("analyse_sandboxes")

    target = models.ForeignKey(Target, on_delete=models.CASCADE, null=True)
    sandbox = models.CharField(_('analyse_sandbox'), max_length=64, choices=Sandbox.choices(), default=Sandbox.CUCKOO)
    md5 = models.CharField(max_length=128,)
    sha1 = models.CharField(max_length=160,)
    sha256 = models.CharField(max_length=256)
    crc32 = models.IntegerField(default=0)
    ssdeep = models.CharField(max_length=148)
    strings = ArrayField(models.TextField(max_length=400,))
    datetime = models.DateTimeField(default=timezone.now())

    def get_analyse_sandbox_label(self):
        return Sandbox(self.sandbox).name.title()
