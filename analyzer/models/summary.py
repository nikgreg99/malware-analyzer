from django.db import models
from django.utils.translation import gettext_lazy as _

from .antivirus import Antivirus
from .domain import Domain
from .extracted_file import ExtractedFile
from .module import Module
from .network_analysis import NetworkAnalysis
from .packer import Packer
from .process import Process
from .resource import Resource
from .rich_header import RichHeader
from .screeshot import Screenshot
from .tag import Tag
from .version_info import VersionInfo
from .header import Header
from .mitre_attack import MitreAttack
from .string import String
from .section import Section
from .target import Target
from .yara_rule import YaraRule


# COMBINED means  using both FileScanIO and Hybrid Analysis
class Sandbox(models.TextChoices):
    CUCKOO = "Cuckoo", _("Cuckoo")
    COMBINED = "Combined", _("Combined")
    VIRUS_TOTAL = "Virus Total", _("Virus Total")


class Summary(models.Model):
    file_name = models.TextField(blank= True)
    job_id = models.TextField(blank=True)
    sandbox = models.CharField(max_length=30, choices=Sandbox.choices, default=Sandbox.CUCKOO)
    size = models.IntegerField(default=0, blank=True)
    type = models.CharField(max_length=100, blank=True)
    compile_time = models.CharField(max_length=40, blank=True)
    MD5 = models.CharField(max_length=32, blank=True)
    SHA1 = models.CharField(max_length=41, blank=True)
    SHA256 = models.CharField(max_length=68, blank=True)
    SHA512 = models.CharField(max_length=128, blank=True)
    CRC32 = models.CharField(max_length=10, blank=True)
    submission_time = models.DateTimeField(null=True, blank=True)
    ssdeep = models.TextField(blank=True)
    impash = models.TextField(blank=True)
    authenti_hash = models.TextField(blank=True)
    fsio_fuzzy_hash = models.TextField(blank=True)
    architecture = models.TextField(null=True)
    subystem_readable = models.TextField(null=True)
    language = models.TextField(null=True)
    isPacked = models.BooleanField(null=True)
    isDotNet = models.BooleanField(null=True)
    isDigitallySigned = models.BooleanField(null=True)
    verdict = models.CharField(max_length=30, default="", blank=True)
    threat_score = models.IntegerField(blank=True, null=True)
    strings = models.ManyToManyField(String)
    sections = models.ManyToManyField(Section)
    network_analysis = models.ForeignKey(NetworkAnalysis, on_delete=models.CASCADE, null=True)
    header = models.ForeignKey(Header, on_delete=models.CASCADE, null=True)
    rich_header = models.ForeignKey(RichHeader, on_delete=models.CASCADE, null=True)
    processes = models.ManyToManyField(Process)
    domains = models.ManyToManyField(Domain)
    tags = models.ManyToManyField(Tag)
    packers = models.ManyToManyField(Packer)
    resources = models.ManyToManyField(Resource)
    version_info = models.ManyToManyField(VersionInfo)
    extracted_files = models.ManyToManyField(ExtractedFile)
    mitre_attacks = models.ManyToManyField(MitreAttack)
    modules = models.ManyToManyField(Module)
    yara_rules = models.ManyToManyField(YaraRule)
    screenshots = models.ManyToManyField(Screenshot)
    antivirus = models.ManyToManyField(Antivirus)

    @property
    def get_fields(self):
        return [(field.name, getattr(self, field.name)) for field in self._meta.get_fields()]
