from time import sleep

from .wrapper.hybrid_analysis import HybridAnalysisAPI
from .wrapper.file_scan_io import FileScanIOAPI
from .wrapper.virus_total import VirusTotalAPI
from .wrapper.cuckoo import CuckooAPI
from analyzer.models import Sandbox, Target, Overview
from .save_overview import save_overview_hybrid_analysis, save_overview_file_scan_io

hybrid_analysis = HybridAnalysisAPI.create("nsf7gnhmada16034ttqw85ul11b17cf0rbb80wigee02e9c9fahch10if8caa7d5")
file_scan_io = FileScanIOAPI.create("zmtIFIh9vKhRNqNS5njousQCCPLQfat6pqEmIoNS")
cuckoo = CuckooAPI.create(host="193.246.121.179", port=8090, api_key="RY_aUdiMgUJNuu8ZeSukWQ")
virus_total = VirusTotalAPI.create("dfddc81d41862fe2a03bc73475d15fbb004993a7f7cc4b9948711d38769a7d3e")


class SubmitURLDispatcher(object):

    def submit_url_Cuckoo(self, url: str):
        return cuckoo.submit_url(url)

    def submit_url_Hybrid_Analysis(self, url: str, environment_id):
        return hybrid_analysis.submit_url(url, environment_id)

    def submit_url_FileScanIO(self, url: str):
        return file_scan_io.submit_url(url)

    def submit_url_virus_total(self, url: str):
        return file_scan_io.submit_url(url)

    def submit_url(self, url: str, sandbox: str, environment_id=None):
        method_name = 'submit_url_' + sandbox
        method = getattr(self, method_name, lambda: 'Invalid sandbox name')
        if sandbox != "Hybrid_Analysis":
            return method(url)
        else:
            return method(url, environment_id)


class SubmitFileDispatcher(object):

    def submit_file_Hybrid_Analysis(self, file_name: str, environment_id):
        return hybrid_analysis.submit_file(file_name, environment_id)

    def submit_file_Cuckoo(self, file_name: str):
        return cuckoo.submit_file(file_name)

    def submit_file_FileScanIO(self, file_name: str):
        return file_scan_io.submit_file(file_name)

    def submit_file_Virus_Total(self, file_name: str):
        return virus_total.submit_file(file_name)

    def submit_file(self, file_name: str, sandbox: str, environment_id=None):
        method_name = 'submit_file_' + sandbox
        method = getattr(self, method_name, lambda: 'Invalid sandbox name')
        if sandbox != "Hybrid_Analysis":
            return method(file_name)
        else:
            return method(file_name, environment_id)


class AnalyseIDDispatcher(object):

    def get_analyse_id_Cuckoo(self, json_response: dict):
        return json_response['task_id']

    def get_analyse_id_Hybrid_Analysis(self, json_response: dict):
        return json_response['job_id']

    def get_analyse_id_FileScanIO(self, json_response: dict):
        return json_response['flow_id']

    def get_analyse_id_Virus_Total(self, json_response: dict):
        return json_response['data']['id']

    def get_analyse_id(self, sandbox: str, json_response: dict):
        method_name = 'get_analyse_id_' + sandbox
        method = getattr(self, method_name, lambda: 'Invalid sandbox name')
        return method(json_response)


class DownloadMemoryStringDispatcher(object):

    def download_memory_string_Hybrid_Analysis(self, job_id:str):
        return hybrid_analysis.report_id_memory_strings(job_id)

    def download_memory_string(self, sandbox: str, job_id: Overview):
        method_name = 'download_memory_string' + sandbox
        method = getattr(self, method_name, lambda: 'Invalid sandbox name')
        return method(job_id)


def download_report_analyse(job_id: str, sandbox: str, report_format: str):
    if sandbox == Sandbox.HYBRID_ANALYSIS:
        return hybrid_analysis.report_id_download_type(job_id, report_format)

    if sandbox == Sandbox.FILE_SCAN_IO:
        return file_scan_io.download_report(job_id, report_format)


def save_analyse_overview(target: Target, sandbox: str, json_response: dict):
    job_id = AnalyseIDDispatcher().get_analyse_id(sandbox, json_response)
    if sandbox == Sandbox.FILE_SCAN_IO:
        sleep(35)  # previously
        overview_report = file_scan_io.get_reports_by_id(job_id)
    if sandbox == Sandbox.HYBRID_ANALYSIS:
        overview_report = hybrid_analysis.report_id_summary(job_id)

    if sandbox == Sandbox.FILE_SCAN_IO:
        analyse = save_overview_file_scan_io(target, overview_report)
    if sandbox == Sandbox.HYBRID_ANALYSIS:
        analyse = save_overview_hybrid_analysis(target, overview_report)

    return analyse
