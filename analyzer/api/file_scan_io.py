import enum
import os
import requests
import urllib.parse

from .utils import connect
from storage import uploads_storage


class FileScanIOAPIReportFormat(enum.Enum):
    HTML = "html"
    PDF = "pdf"
    MISP = "misp"
    STIX = "stix"


class FileScanIOAPIFileNotFound(Exception):

    def __int__(self, file_path):
        Exception.__init__(self, "FileScanIOAPI: {} not found".format(file_path))


class FileScanIOAPI(object):
    base_url = "https://www.filescan.io/api/"

    def __int__(self, api_key):
        self.session = requests.Session()
        self.session.headers = {
            'X-Api-Key': api_key
        }

    def submit_file(self, file_name=None, data=None):
        if (file_name is None or not os.path.exists(file_name) or
                not os.path.isfile(file_name)):
            raise FileScanIOAPI(file_name)

        file = {'file': (file_name, uploads_storage.open(file_name, 'rb'))}

        json_request = connect(self.session, "POST", urllib.parse.urljoin(self.api_base_url, "scan/file"),
                               data=data, files=file)

        return json_request

    def submit_url(self, url=None):
        url = {"url": ("", url)}
        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "scan/url"),
                       files=url)

    def get_all_reports(self, flow_id=None):
        if flow_id is not None:
            return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "{}/report".format(flow_id)))

    def get_reports_by_id(self, flow_id: str):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url), "scan/{}/report".format(flow_id))

    def download_report(self, flow_id, report_format: FileScanIOAPIReportFormat):
        if flow_id is not None:
            return connect(self.session, "GET",
                           urllib.parse.urljoin(self.base_url, "reports/{}/download").format(flow_id),
                           data={'format': report_format.value})

    def get_specif_report(self, report_id: str, file_hash: str):
        if report_id is not None or file_hash is not None:
            return connect(self.session, "GET",
                           urllib.parse.urljoin(self.base_url, "reports/{}/{}".format(report_id, file_hash)))

    def get_single_file(self, hash=None):
        if hash is not None:
            return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "files/{}".format(hash)))

    def get_system_info(self):
        return connect(self.session, "GET",  urllib.parse.urljoin(self.base_url, "system/info"))

    def get_system_config(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "system/config"))

    def get_mitre_data(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "system/mitre"))
