import os
import requests
import urllib.parse

from .utils import connect
from storage import uploads_storage


class FileScanIOAPIFileNotFound(Exception):

    def __int__(self, file_path):
        Exception.__init__(self, "FileScanIOAPI: {} not found".format(file_path))


class FileScanIOAPI(object):
    base_url = "https://www.filescan.io/api/"

    def __int__(self, api_key):
        self.session = requests.Session()

    def submit_file(self, file_name=None, data=None):
        if (file_name is None or not os.path.exists(file_name) or
                not os.path.isfile(file_name)):
            raise FileScanIOAPI(file_name)

        file = {'file': (file_name, uploads_storage.open(file_name, 'rb'))}

        json_request = connect(self.session, "POST", urllib.parse.urljoin(self.api_base_url, "scan/file"),
                               data=data, files=file)

        return json_request

    def submit_url(self, url=None):

        url = {"url": ("", url)}

        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "scan/url"),
                       files=url)

    def all_reports(self, flow_id=None):

        if flow_id is not None:
            return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "{}/report".format(flow_id)))

    def get_single_file(self, hash=None):

        if hash is not None:
            return connect(self.session, urllib.parse.urljoin(self.base_url, "files/{}".format(hash)))
