from time import sleep

from .save import save_network_analysis
from .save.save_antivirus import save_antivirus_analysis
from .save.save_domain import save_domains
from .save.save_mitre_rules import save_mitre_rules
from .save.save_module import save_imports_virus_total_api
from .save.save_process import save_processes
from .save.save_resource import save_resources_virus_total_api
from .save.save_screenshot import save_screenshots
from .save.save_section import save_sections_virus_total_api
from .save.save_tag import save_tags
from .save.save_network_analysis import save_network_analysis
from .wrapper.hybrid_analysis import HybridAnalysisAPI, HybridAnalysisAPIEnvironment
from .wrapper.file_scan_io import FileScanIOAPI
from .wrapper.virus_total import VirusTotalAPI
from .wrapper.cuckoo import CuckooAPI
from analyzer.models import Sandbox, Summary
from analyzer.api.save.save_overview import save_overview_file_scan_io

hybrid_analysis = HybridAnalysisAPI.create("nsf7gnhmada16034ttqw85ul11b17cf0rbb80wigee02e9c9fahch10if8caa7d5")
file_scan_io = FileScanIOAPI.create("zmtIFIh9vKhRNqNS5njousQCCPLQfat6pqEmIoNS")
cuckoo = CuckooAPI.create(host="193.246.121.179", port=8090, api_key="RY_aUdiMgUJNuu8ZeSukWQ")
virus_total = VirusTotalAPI.create("dfddc81d41862fe2a03bc73475d15fbb004993a7f7cc4b9948711d38769a7d3e")


class SubmitFileDispatcher(object):

    def submit_file_Hybrid_Analysis(self, file_name: str, environment_id):
        return hybrid_analysis.submit_file(file_name, environment_id)

    def submit_file_Cuckoo(self, file_name: str):
        return cuckoo.submit_file(file_name)

    def submit_file_FileScanIO(self, file_name: str):
        return file_scan_io.submit_file(file_name)

    def submit_file_Virus_Total(self, file_name: str):
        return virus_total.submit_file(file_name)

    def submit_file(self, file_name: str, sandbox: str, environment_id=None):
        method_name = 'submit_file_' + sandbox
        method = getattr(self, method_name, lambda: 'Invalid sandbox name')
        if sandbox != "Hybrid_Analysis":
            return method(file_name)
        else:
            return method(file_name, environment_id)


def download_report_analyse(job_id: str, sandbox: str, report_format: str):
    if sandbox == Sandbox.HYBRID_ANALYSIS:
        return hybrid_analysis.report_id_download_type(job_id, report_format)

    if sandbox == Sandbox.FILE_SCAN_IO:
        return file_scan_io.download_report(job_id, report_format)


def report_hybrid_analysis(sha_256):
    string = sha_256 + ":" + HybridAnalysisAPIEnvironment.WIN7_64_BIT
    ha_analysis_response_item = hybrid_analysis.report_id_summary(string)
    if not 'validation_errors' in ha_analysis_response_item:
        submit_name = ha_analysis_response_item['submit_name']
        size = ha_analysis_response_item['size']
        type = ha_analysis_response_item['type']
        md5 = ha_analysis_response_item['md5']
        sha1 = ha_analysis_response_item['sha1']
        sha256 = ha_analysis_response_item['sha256']
        sha512 = ha_analysis_response_item['sha512']
        ssdeep = ha_analysis_response_item['ssdeep'] if ha_analysis_response_item['ssdeep'] is not None else ''
        impash = ha_analysis_response_item['impash'] if ha_analysis_response_item['impash'] is not None else ''


def report_sha_256_virus_total(sha_256):
    vt_response = virus_total.get_file_report(sha_256)
    if 'data' in vt_response:
        attributes = vt_response['data']['attributes']
        pe_info = attributes['pe_info']
        resources = pe_info['resource_details']
        sections = pe_info['sections']
        imports = pe_info['import_list']
        last_analysis_results = attributes['last_analysis_results']
        magic = attributes['magic']
        size = attributes['size']
        md5 = attributes['md5']
        sha_1 = attributes['sha1']
        sha_256 = attributes['sha256']
        ssdeep = attributes['ssdeep']
        imphash = pe_info['imphash']
        authenti_hash = attributes['authentihash']

        summary = Summary.objects.create(type=magic, size=size, MD5=md5, SHA1=sha_1, SHA256=sha_256, ssdeep=ssdeep,
                                         impash=imphash,
                                         authenti_hash=authenti_hash, sandbox=Sandbox.VIRUS_TOTAL)

        save_resources_virus_total_api(summary, resources)
        save_sections_virus_total_api(summary, sections)
        save_imports_virus_total_api(summary, imports)
        save_antivirus_analysis(summary, last_analysis_results)

    return summary


def save_analysis_file(target, sandbox):
    target_name_str = target.name.name

    id_hybrid_analysis = SubmitFileDispatcher().submit_file(target_name_str, 'Hybrid_Analysis',
                                                            HybridAnalysisAPIEnvironment.WIN7_64_BIT)['job_id']
    id_file_scanIO = SubmitFileDispatcher().submit_file(target_name_str, 'FileScanIO')['flow_id']
    id_virus_total = virus_total.submit_file(target_name_str)['data']['id']
    sleep(25)  # previously
    overview_report_file_scan_io = file_scan_io.get_reports_by_id(id_file_scanIO)
    report_hybrid_analysis = hybrid_analysis.report_id_summary(id_hybrid_analysis)

    analyse = save_overview_file_scan_io(target, overview_report_file_scan_io)
    save_screenshots(analyse, hybrid_analysis.report_id_screenshots(id_hybrid_analysis))
    save_processes(analyse, report_hybrid_analysis['processes'])
    save_tags(analyse, report_hybrid_analysis['classification_tags'])
    save_domains(analyse, report_hybrid_analysis['domains'])
    save_mitre_rules(analyse, report_hybrid_analysis['mitre_attcks'])
    response = hybrid_analysis.report_pcap(id_hybrid_analysis)
    save_network_analysis(analyse, response, id_hybrid_analysis)
    return analyse


def save_analysis_sha_256(sha_256):

    return report_sha_256_virus_total(sha_256)


def save_analysis_url(url):
    analyse = None
    vt_id = virus_total.submit_url(url)['data']['id']
    vt_response = virus_total.get_analysis(vt_id)
    results = vt_response['data']['results']

    return analyse
