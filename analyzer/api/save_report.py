from .save import save_network_analysis
from .save.save_antivirus import save_antivirus_analysis
from .save.save_domain import save_domains
from .save.save_extracted_file import save_extracted_files_hybrid_analysis
from .save.save_mitre_rules import save_mitre_rules
from .save.save_module import save_imports_virus_total_api
from .save.save_process import save_processes
from .save.save_resource import save_resources_virus_total_api
from .save.save_screenshot import save_screenshots
from .save.save_section import save_sections_virus_total_api
from .save.save_tag import save_tags
from .save.save_network_analysis import save_network_analysis
from .wrapper.hybrid_analysis import HybridAnalysisAPI, HybridAnalysisAPIEnvironment
from .wrapper.file_scan_io import FileScanIOAPI
from .wrapper.virus_total import VirusTotalAPI
from .wrapper.cuckoo import CuckooAPI
from analyzer.models import Sandbox, Summary, Target
from analyzer.api.save.save_overview import save_overview_file_scan_io_hybrid_analysis, save_cuckoo_overview
from analyzer.models.report import Report

# API SERVICES
hybrid_analysis = HybridAnalysisAPI.create("nsf7gnhmada16034ttqw85ul11b17cf0rbb80wigee02e9c9fahch10if8caa7d5")
file_scan_io = FileScanIOAPI.create("zmtIFIh9vKhRNqNS5njousQCCPLQfat6pqEmIoNS")
cuckoo = CuckooAPI.create(host="192.16.99.14", port=8090, api_key="RY_aUdiMgUJNuu8ZeSukWQ")
virus_total = VirusTotalAPI.create("dfddc81d41862fe2a03bc73475d15fbb004993a7f7cc4b9948711d38769a7d3e")


def wait_for_vt_response(vt_id):
    # Wait submission completion
    while True:
        report_virus_total = virus_total.get_analysis(vt_id)
        if report_virus_total['data']['attributes']['status'] == 'completed':
            return report_virus_total


def wait_for_file_scan_io_response(file_scan_io_id):
    # Wait submission completion
    while True:
        file_scan_io_response = file_scan_io.get_reports_by_id(file_scan_io_id)
        print(file_scan_io_response)
        report = file_scan_io_response['reports']
        report_key = list(report.keys())[0]
        if 'resources' in report[report_key]:
            return file_scan_io_response


def wait_for_hybrid_analysis_response(hybrid_analysis_id):
    # Wait submission completion
    while True:
        state_hybrid_analysis = hybrid_analysis.report_id_state(hybrid_analysis_id)
        print(state_hybrid_analysis)
        if state_hybrid_analysis['state'] == "SUCCESS":
            return hybrid_analysis.report_id_summary(hybrid_analysis_id)


def download_report_analyse(job_id: str, sandbox: str, report_format: str):
    if sandbox == Sandbox.COMBINED:
        return file_scan_io.download_report(job_id, report_format)
    elif sandbox == Sandbox.CUCKOO:
        return cuckoo.task_report(job_id, report_format)
    else:
        return None


def parse_hybrid_analysis_response(hybrid_analysis_response):
    if not 'error' in hybrid_analysis_response:
        submit_name = hybrid_analysis_response['submit_name']
        size = hybrid_analysis_response['size']
        type = hybrid_analysis_response['type']
        md5 = hybrid_analysis_response['md5']
        sha1 = hybrid_analysis_response['sha1']
        sha256 = hybrid_analysis_response['sha256']
        sha512 = hybrid_analysis_response['sha512']
        ssdeep = hybrid_analysis_response['ssdeep']
        imphash = hybrid_analysis_response['imphash']

        summary = Summary.objects.create(file_name=submit_name, size=size, MD5=md5, type=type,
                                         sandbox=Sandbox.COMBINED,
                                         SHA1=sha1, SHA256=sha256, SHA512=sha512, impash=imphash, ssdeep=ssdeep)

        if hybrid_analysis_response['processes']:
            save_processes(summary, hybrid_analysis_response['processes'])
        if hybrid_analysis_response['extracted_files']:
            save_extracted_files_hybrid_analysis(summary, hybrid_analysis_response['extracted_files'])
        if hybrid_analysis_response['mitre_attcks']:
            save_mitre_rules(summary, hybrid_analysis_response['mitre_attcks'])
        if hybrid_analysis_response['classification_tags']:
            save_tags(summary, hybrid_analysis_response['classification_tags'])
        if hybrid_analysis_response['domains']:
            save_domains(summary, hybrid_analysis_response['domains'])
    return summary


def parse_vt_submit_file_response(vt_response):
    if 'meta' in vt_response and 'data' in vt_response:
        file_info = vt_response['meta']['file_info']
        results = vt_response['data']['attributes']['results']
        sha1 = file_info['sha1']
        sha_256 = file_info['sha256']
        md5 = file_info['md5']
        size = file_info['size']

        summary = Summary.objects.create(size=size, MD5=md5, SHA1=sha1, SHA256=sha_256, sandbox=Sandbox.VIRUS_TOTAL)
        save_antivirus_analysis(summary, results)
        return summary


def parse_vt_sha_256_response(vt_response):
    if 'data' in vt_response:
        attributes = vt_response['data']['attributes']
        pe_info = attributes['pe_info']
        resources = pe_info['resource_details']
        sections = pe_info['sections']
        imports = pe_info['import_list']
        last_analysis_results = attributes['last_analysis_results']
        magic = attributes['magic']
        size = attributes['size']
        md5 = attributes['md5']
        sha_1 = attributes['sha1']
        sha_256 = attributes['sha256']
        ssdeep = attributes['ssdeep']
        imphash = pe_info['imphash']
        authenti_hash = attributes['authentihash']

        summary = Summary.objects.create(type=magic, size=size, MD5=md5, SHA1=sha_1, SHA256=sha_256, ssdeep=ssdeep,
                                         impash=imphash, authenti_hash=authenti_hash, sandbox=Sandbox.VIRUS_TOTAL)

        save_resources_virus_total_api(summary, resources)
        save_sections_virus_total_api(summary, sections)
        save_imports_virus_total_api(summary, imports)
        save_antivirus_analysis(summary, last_analysis_results)

    return summary


def parse_vt_url_response(vt_response):
    summary = Summary.objects.create(sandbox=Sandbox.VIRUS_TOTAL)
    save_antivirus_analysis(summary, vt_response['data']['attributes']['results'])
    return summary


def save_analysis_file(file_target: Target):
    target_name_str = file_target.name.name
    hybrid_analysis_id = hybrid_analysis.submit_file(target_name_str, HybridAnalysisAPIEnvironment.WIN7_64_BIT)['job_id']
    file_scan_io_id = file_scan_io.submit_file(target_name_str)['flow_id']
    vt_id = virus_total.submit_file(target_name_str)['data']['id']
    cuckoo_id = cuckoo.submit_file(target_name_str)['task_id']

    report_file_scan_io = wait_for_file_scan_io_response(file_scan_io_id)
    report_hybrid_analysis = wait_for_hybrid_analysis_response(hybrid_analysis_id)
    report_vt = wait_for_vt_response(vt_id)
    report_cuckoo = cuckoo.task_report_summary(cuckoo_id)

    # COMBINED (FILE_SCAN_IO + HYBRID_ANALYSIS)
    analyse_combined = save_overview_file_scan_io_hybrid_analysis(report_file_scan_io, report_hybrid_analysis,file_scan_io_id)
    save_screenshots(analyse_combined, hybrid_analysis.report_id_screenshots(hybrid_analysis_id))
    save_processes(analyse_combined, report_hybrid_analysis['processes'])
    save_tags(analyse_combined, report_hybrid_analysis['classification_tags'])
    save_domains(analyse_combined, report_hybrid_analysis['domains'])
    save_mitre_rules(analyse_combined, report_hybrid_analysis['mitre_attcks'])
    response_pcap = hybrid_analysis.report_pcap(hybrid_analysis_id)
    if response_pcap is not None:
        save_network_analysis(analyse_combined, response_pcap, hybrid_analysis_id)

    analyse_virus_total = parse_vt_submit_file_response(report_vt)
    analyse_cuckoo = save_cuckoo_overview(report_cuckoo)
    report_file = Report.objects.create(target=file_target)
    report_file.scans.add(analyse_combined)
    report_file.scans.add(analyse_virus_total)
    report_file.scans.add(analyse_cuckoo)

    return report_file


def save_analysis_sha_256(sha_256_target: Target):
    sha_256 = sha_256_target.name.name

    report_hybrid_analysis = hybrid_analysis.report_id_summary(sha_256 + ":" + str(HybridAnalysisAPIEnvironment.WIN7_64_BIT.value))
    report_virus_total = virus_total.get_file_report(sha_256)

    analyse_sha_256_hybrid_analysis = parse_hybrid_analysis_response(report_hybrid_analysis)
    analyse_sha_256_vt = parse_vt_sha_256_response(report_virus_total)

    report_sha256 = Report.objects.create(target=sha_256_target)
    report_sha256.scans.add(analyse_sha_256_hybrid_analysis)
    report_sha256.scans.add(analyse_sha_256_vt)
    return report_sha256


def save_analysis_url(url_target: Target):
    url = url_target.name.name
    file_scan_io_id = file_scan_io.submit_url(url)['flow_id']
    hybrid_analysis_id = hybrid_analysis.submit_url(url, HybridAnalysisAPIEnvironment.WIN7_64_BIT)['job_id']
    vt_id = virus_total.submit_url(url)['data']['id']

    report_file_scan_io = wait_for_file_scan_io_response(file_scan_io_id)
    report_hybrid_analysis = wait_for_hybrid_analysis_response(hybrid_analysis_id)
    report_vt = wait_for_vt_response(vt_id)

    summary_combined = save_overview_file_scan_io_hybrid_analysis(report_file_scan_io, report_hybrid_analysis, file_scan_io_id)
    summary_vt = parse_vt_url_response(report_vt)



    analyse = Report.objects.create(target=url_target)
    analyse.scans.add(summary_vt)
    analyse.scans.add(summary_combined)
    return analyse
