import enum
import os.path
import requests
import urllib.parse

from analyzer.api import connect, build_cuckoo_api_path


class CuckooAPIReportFormat(enum.Enum):
    JSON = "json"
    HTML = "pdf"
    ALL = "all"
    DROPPED = "dropped"
    PACKAGE_FILES = "package_files"


class CuckooAPIVmNotAvailable(Exception):

    def __int__(self, vm_name):
        Exception.__init__(self, "CuckooAPI: VM {0} not available!".format(vm_name))


class CuckooAPIFileNotFound(Exception):

    def __int__(self, file):
        Exception.__init__(self, "Cuckoo API: file not found at {0}".format(file))


class CuckooAPITaskNotFound(Exception):
    def __int__(self, task_id):
        Exception.__init__(self, "Cuckoo API: {0} non found".format(task_id))


class CuckooAPI(object):

    def __init__(self, host="127.0.0.1", port=8090, protocol="http"):
        self.session = requests.Session()
        self.host = host
        self.port = port
        self.protocol = protocol
        self.api_base_url = build_cuckoo_api_path(host, port, protocol)

    def get_cuckoo_host(self):
        return self.host

    def get_cuckoo_port(self):
        return self.port

    def get_cuckoo_protocol(self):
        return self.protcol

    def get_cuckoo_status(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.api_base_url, "cuckoo/status"))

    def get_cuckoo_machines(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.api_base_url, "machines/list"))

    def machines_detail(self, vm_name=None):

        if vm_name is None:
            raise CuckooAPIVmNotAvailable(vm_name)

        return connect(self.session, "GET",
                       urllib.parse.urljoin(self.api_base_url, "machines/view/{0}".format(vm_name)))

    def submit_file(self, file_path=None, data=None):

        if (file_path is None or not os.path.exists(file_path) or
                not os.path.isfile(file_path)):
            return CuckooAPIFileNotFound(file_path)

        with open(file_path, "rb") as sample:
            file = {"file": (os.path.basename(file_path, sample))}
            json_request = connect(self.session, "POST", urllib.parse.urljoin(self.api_base_url, "tasks/create/file"),
                                   data=data, files=file)

        return json_request

    def submit_url(self, url, data=None):

        url = {"url": ("", url)}

        return connect(self.session, "POST", urllib.parse.urljoin(self.api_base_url, "tasks/create/url"),
                       data=data, files=url)

    def task_report_summary(self, task_id):

        json_request = connect(self.session, "GET",
                               urllib.parse.urljoin(self.api_base_url, "tasks/summary/{0}".format(task_id)))

        if json_request is None:
            raise CuckooAPITaskNotFound(task_id)
        else:
            return json_request

    def task_report(self, task_id=None, report_format=CuckooAPIReportFormat.JSON):

        if task_id < 1 or task_id is None:
            raise CuckooAPITaskNotFound(task_id)

        response = connect(self.session, "GET",
                           urllib.parse.urljoin(self.api_base_url, "tasks/report/{0}/{1}".format(task_id, report_format)))

        if report_format == CuckooAPIReportFormat.JSON:
            return response.text

    def task_screenshots(self, task_id=None, file_path=None, screenshot=None):

        if task_id < 1 or task_id is None:
            raise CuckooAPITaskNotFound(task_id)

        if file_path is None or os.path.exists(file_path):
            raise CuckooAPIFileNotFound(file_path)

        if screenshot is not None:
            screenshot = str(screenshot)

        response = connect(self.session,"GET", urllib.parse.urljoin(self.api_base_url,"/tasks/screenshots/{0}/{1}".format(task_id,screenshot)),
                           stream=True)

        with open(file_path, 'wb') as screen:
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:
                    screen.write(chunk)

