import enum
import requests
import urllib.parse

from storage import uploads_storage
from .utils import connect


class HybridAnalysisAPIEnvironment(enum.Enum):
    WIN7_32_BIT = 100
    WIN7_32_BIT_HWP_SUPPORT = 110,
    WIN7_64_BIT = 120,
    ANDROID_STATIC_ANALYSIS = 200,
    LINUX_UBUNTU_16_04_64_BIT = 300


class HybridAnalysisAPI(object):
    base_url = 'https://www.hybrid-analysis.com/api/v2/'

    def __init__(self, api_key: str, user_agent='Falcon Sandbox'):
        self.session = requests.Session()
        self.session.headers = {
            'api-key': api_key,
            'user-agent': user_agent
        }

    def search_hash(self, hash_file: str):
        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "search/hash"),
                       data={'hash': hash_file})

    def search_hashes(self, hashes_file: list):
        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "search/hashes"),
                       data={'hashes[]': hashes_file})

    def search_terms(self, terms: str):
        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "search/terms"),
                       data=terms)

    def quick_scan_state(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "quick-scan/state"))

    def quick_scan_url(self, url: str, scan_type):
        options = {url, scan_type}
        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "quick-scan/url"), data=options)

    def quick_scan_file(self, file_name: str, scan_type: str):
        options = {scan_type}
        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "quick-scan/file"),
                       data=options, files={'file': (file_name, uploads_storage.open(file_name, 'rb'))})

    def quick_scan_id(self, id: str):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "quick-scan/{}".format(id)))

    def quick_scan_convert_to_full(self, id: str, environment_id: HybridAnalysisAPIEnvironment):
        return connect(self.session, "POST", "quick-scan/{}/convert-to-full".format(id),
                       data={environment_id})

    def submit_file(self, file_name: str, environment_id: HybridAnalysisAPIEnvironment):
        options = dict()
        options.update({'environment_id': environment_id.value})

        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "submit/file"),
                       data=options, files={'file': (file_name, uploads_storage.open(file_name, 'rb'))})

    def submit_url(self, url: str, environment_id: HybridAnalysisAPIEnvironment):
        options = dict(url)
        options.update({'environment_id': environment_id.value})
        return connect("self.session", "POST", urllib.parse.urljoin(self.base_url, "submit/url"),
                       data=options)

    def submit_hash_for_url(self, url: str):
        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "submit/hash-for-url"),
                       data={url})

    def report_id_summary(self, id: str):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "report/{}/summary").format(id))

    def report_ids_summary(self, ids: list):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "report/summary"),
                       data={'hashes[]': ids})

    def report_download_type(self, id: str, type: str):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "report/{}/type/{}".format(id, type)))

    def overview_sha256(self, sha256: str):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/overview/{}".format(sha256)))

    def overview_sha256_sample(self, sha256: str):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/overview/{}/sample".format(sha256)))

    def system_version(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/system/version"))

    def system_environments(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/system/environments"))

    def system_action_scripts(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/system/action-scripts"))

    def system_stats(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/system/stats"))

    def system_configuration(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/system/configuration"))

    def system_total_submissions(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/system/total-submissions"))

    def system_queue_size(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/system/queue-size"))

    def key_current(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/key/current"))

    def key_submission_quota(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/key/submission-quota"))

    def feed_latest(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/feed/latest"))
