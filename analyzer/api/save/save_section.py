from analyzer.models import CharReadable, Overview
from analyzer.models.section import Section


def save_characteristic_readable_if_not_exists(characteristic_readable: str):
    char_readable = CharReadable.objects.get_or_create(name=characteristic_readable)
    return char_readable


def save_section_if_not_exists(dict_section: dict):
    name = dict_section['name']
    va = dict_section['va']
    file_rva = dict_section['fileRva']
    virtual_size = dict_section['virtualSize']
    size_of_raw_data = dict_section['sizeOfRawData']
    MD5 = dict_section['md5']
    entropy = dict_section['entropy']
    characteristics = dict_section['characteristics']
    characteristics_readable = dict_section['characteristicsReadable']
    section, created = Section.objects.get_or_create(name=name, va=va, file_rva=file_rva, virtual_size=virtual_size,
                                                     size_raw_data=size_of_raw_data,
                                                     MD5=MD5, entropy=entropy, characteristics=characteristics)

    for characteristic_readable in characteristics_readable:
        section.char_readable.get_or_create(name=characteristic_readable)
    return section


def save_sections(overview: Overview, dict_sections: dict):
    for dict_section in dict_sections:
        section = save_section_if_not_exists(dict_section)
        overview.sections.add(section)
