from analyzer.models import Overview
from analyzer.models.compiler_flag import CompilerFlag
from analyzer.models.header import Header


def save_compiler_flag(name: str, state: bool):
    compiler_flag = CompilerFlag.objects.filter(name=name, state=state)
    if not compiler_flag.exists():
        compiler_flag = CompilerFlag(name=name, state=state)
        compiler_flag.save()
    else:
        compiler_flag = compiler_flag.get()
    return compiler_flag


def save_header(overview_id: int, header_dict: dict):
    image_base = header_dict['imageBase']
    entrypoint_va = header_dict['entrypointVA']
    entrypoint_name = header_dict['entrypointName']
    entrypoint_entropy = header_dict['entrypointEntropy']
    crc_in_file = header_dict['crcInFile']
    crc_actual = header_dict['crcActual']
    linker_version_major = header_dict['linkerVersionMajor']
    linker_version_minor = header_dict['linkerVersionMinor']
    pointer_to_symbol_table = header_dict['pointerToSymbolTable']
    number_of_symbols = header_dict['numberOfSymbols']

    header, created = Header.objects.get_or_create(image_base=image_base,
                                                   entrypoint_va=entrypoint_va,
                                                   entrypoint_name=entrypoint_name,
                                                   crc_in_fle=crc_in_file, crc_actual=crc_actual,
                                                   entrypoint_entropy=entrypoint_entropy,
                                                   linker_version_major=linker_version_major,
                                                   linker_version_minor=linker_version_minor,
                                                   pointer_to_symbol_table=pointer_to_symbol_table,
                                                   number_of_symbols=number_of_symbols)

    dict_compiler_flags = header_dict['compilerFlags']
    for name, state in dict_compiler_flags.items():
        compiler_flag = save_compiler_flag(name, state)
        header.compiler_flags.add(compiler_flag)
    Overview.objects.filter(pk=overview_id).update(header=header)
