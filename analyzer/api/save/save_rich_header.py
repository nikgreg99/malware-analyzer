from analyzer.models import Overview
from analyzer.models.rich_header import RichHeader


def save_rich_header(overview: Overview, dict_rich_header: dict, dict_rich_header_ex):
    checksum = dict_rich_header['checksum']
    key = dict_rich_header['key']
    raw_data = dict_rich_header['rawData']
    clear_data = dict_rich_header['clearData']
    error = dict_rich_header_ex['error']
    csum_calc = dict_rich_header_ex['csum_calc']
    csum_file = dict_rich_header_ex['csum_file']
    offset = dict_rich_header_ex['offset']

    rich_header, created = RichHeader.objects.get_or_create(checksum=checksum, key=key, raw_data=raw_data,
                                                   clear_data=clear_data, csum_calc=csum_calc, csum_file=csum_file,
                                                   error=error, offset=offset)

    dict_comp_information = dict_rich_header['compInformation']

    for comp_info in dict_comp_information:
        rich_header.comp_information.get_or_create(comp_id=comp_info['compId'], linker=comp_info['linker'], resource_count=comp_info['resourceCount'])

    Overview.objects.filter(pk=overview.id).update(rich_header=rich_header)

