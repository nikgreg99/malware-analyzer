from django.utils import timezone

from .save_extracted_file import save_extracted_files
from .save_header import save_header
from .save_module import save_modules
from .save_resource import save_resources
from .save_rich_header import save_rich_header
from .save_section import save_sections
from .save_strings import save_strings
from .save_version_info import save_version_infos
from .save_yara_rules import save_yara_rules
from analyzer.api.utils import check_if_key_exists
from analyzer.models import Target, Overview, Sandbox


def save_overview_file_scan_io(target: Target, overview_report: dict, ):
    # Take analyse report
    reports = overview_report['reports']
    report_key = list(reports.keys())[0]
    resources = reports[report_key]['resources']
    resource_key = list(resources.keys())[0]
    resource = resources[resource_key]

    # Take main blocks
    digests = resource['digests']
    extendedData = resource['extendedData']
    metaData = resource['metaData']
    date = check_if_key_exists(extendedData, 'dates')
    verdict_info = resource['verdict']

    size = resource['fileSize']
    MD5 = digests['MD5']
    SHA1 = digests['SHA-1']
    SHA256 = digests['SHA-256']
    SHA512 = digests['SHA-512']
    ssdeep = extendedData['ssdeep']
    type = extendedData['fileMagicDescription']
    impash = check_if_key_exists(extendedData, 'imphash')
    authenti_hash = check_if_key_exists(extendedData, 'authentihash')
    fsio_fuzzy_hash = check_if_key_exists(metaData, 'fuzzyfsiohash')
    architecture = check_if_key_exists(extendedData, 'architecture')
    language = check_if_key_exists(extendedData, 'language')
    compile_time = check_if_key_exists(date, 'dateUtc')
    isPacked = check_if_key_exists(extendedData, 'isPacked')
    isDotNet = check_if_key_exists(extendedData, 'isDotNet')
    isDigitallySigned = check_if_key_exists(extendedData, 'isDigitallySigned')
    verdict = verdict_info[0]

    overview = Overview.objects.create(sandbox=Sandbox.FILE_SCAN_IO, job_id=report_key, size=size, type=type, MD5=MD5,
                                       SHA1=SHA1, SHA256=SHA256, SHA512=SHA512, ssdeep=ssdeep, language=language,
                                       architecture=architecture, compile_time=compile_time,
                                       submission_time=timezone.now(), isPacked=isPacked,
                                       isDotNet=isDotNet, isDigitallySigned=isDigitallySigned, impash=impash,
                                       authenti_hash=authenti_hash, fsio_fuzzy_hash=fsio_fuzzy_hash,
                                       target=target, verdict=verdict)

    if 'packers' in extendedData:
        packers = extendedData['packers']
        for packer in packers:
            overview.packers.get_or_create(name=packer)

    if 'strings' in resource:
        strings = resource['strings'][0]
        references = strings['references']
        save_strings(overview, references)

    if 'imageBase' in extendedData:
        save_header(overview.id, extendedData)

    if 'verinfo' in extendedData:
        save_version_infos(overview, extendedData['verinfo'])
    if 'sections' in extendedData:
        save_sections(overview, extendedData['sections'])
    if 'resources' in extendedData:
        save_resources(overview, extendedData['resources'])
    if 'extractedFiles' in resource:
        save_extracted_files(overview, resource['extractedFiles'])
    if 'imports' in extendedData:
        save_modules(overview, extendedData['imports'], extendedData['importsEx'])
    if 'yaraMatches' in resource:
        save_yara_rules(overview, resource['yaraMatches'])

    if 'richHeader' in extendedData and 'richHeaderEx' in extendedData:
        save_rich_header(overview, resource['extendedData']['richHeader'], resource['extendedData']['richHeaderEx'])
    return overview
