from analyzer.api.utils import check_if_key_exists
from analyzer.models import Overview
from analyzer.models.import_lib import Import
from analyzer.models.module import Module


def save_import_lib_if_not_exists(lib_import):
    name = lib_import['name']
    file_rva = check_if_key_exists(lib_import, 'fileRva')
    is_suspicious = True if 'suspicious' in lib_import else False
    lib_import, created = Import.objects.get_or_create(name=name, file_rva=file_rva, is_suspicious=is_suspicious)
    return lib_import


def save_module_if_not_exist(module):
    module_name = module['module']
    internal_imports = module['imports']
    module_row, created = Module.objects.get_or_create(name=module_name)
    for internal_import in internal_imports:
        lib_import = save_import_lib_if_not_exists(internal_import)
        module_row.imports.add(lib_import)
    return module_row


def save_modules(overview: Overview, modules, modules_ex):
    for module in modules:
        module_row = save_module_if_not_exist(module)
        overview.modules.add(module_row)

    for module_ex in modules_ex:
        module = module_ex['module']
        module_name = module['name']
        module_threat = True if 'suspicious' in module else False
        module_row, created = Module.objects.get_or_create(name=module_name.upper())
        module_row.is_suspicious = module_threat
        module_row.save()
        for import_ex in module_ex['imports']:
            import_ex_row = save_import_lib_if_not_exists(import_ex)
            if not import_ex_row in module_row.imports.all():
                module_row.imports.add(import_ex_row)
