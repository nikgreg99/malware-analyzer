from analyzer.api.utils import check_if_key_exists
from analyzer.models import Summary
from analyzer.models.extracted_file import ExtractedFile


def save_extracted_file_if_not_exists(file: dict):
    digests = file['digests']
    meta_data = file['metaData']
    extended_data = file['extendedData']
    origin = file['origin']
    media_type = file['mediaType']

    submit_name = file['submitName']
    size = file['fileSize']
    MD5 = digests['MD5']
    SHA1 = digests['SHA-1']
    SHA256 = digests['SHA-256']
    SHA512 = digests['SHA-512']
    description = extended_data['fileMagicDescription']
    ssdeep = extended_data['ssdeep']
    entropy = meta_data['entropy']
    resource_id = meta_data['resourceID'] if 'resourceID' in meta_data else 0
    origin_type = origin['type']
    string = media_type['string']

    file_row, created = ExtractedFile.objects.get_or_create(submit_name=submit_name, size=size, MD5=MD5, SHA1=SHA1,
                                                            SHA256=SHA256, SHA512=SHA512, entropy=entropy,
                                                            ssdeep=ssdeep, origin=origin_type, media_type=string,
                                                            description=description, resource_id=resource_id)

    return file_row


def save_extracted_files(overview: Summary, files: dict):
    for file in files:
        file_row = save_extracted_file_if_not_exists(file)
        overview.extracted_files.add(file_row)


def save_extracted_files_hybrid_analysis(overview: Summary, files: dict):
    for file in files:
        name = file['name']
        file_path = file['file_path'] if file['file_path'] is not None else ''
        md5 = file['md5']
        sha1 = file['sha1']
        sha256 = file['sha256']
        description = file['description']
        runtime_process = file['runtime_process']

        file_row, created = ExtractedFile.objects.get_or_create(name=name, file_path=file_path, MD5=md5,
                                                                SHA1=sha1, SHA256=sha256, description=description,
                                                                runtime_process=runtime_process)
        overview.extracted_files.add(file_row)
