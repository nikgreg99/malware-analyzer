from .wrapper.hybrid_analysis import HybridAnalysisAPI, HybridAnalysisAPIEnvironment
from .wrapper.file_scan_io import FileScanIOAPI
from .wrapper.virus_total import VirusTotalAPI
from analyzer.models import Sandbox, Target
from .saver import save_hybrid_analysis_overview

hybrid_analysis_client = HybridAnalysisAPI("nsf7gnhmada16034ttqw85ul11b17cf0rbb80wigee02e9c9fahch10if8caa7d5")
file_scan_io_client = FileScanIOAPI("zmtIFIh9vKhRNqNS5njousQCCPLQfat6pqEmIoNS")
cuckoo_client = None
virus_total_client = VirusTotalAPI("dfddc81d41862fe2a03bc73475d15fbb004993a7f7cc4b9948711d38769a7d3e")


def submit_file_to_scan(file: str, sandbox: str, analyse_environment=HybridAnalysisAPIEnvironment.WIN7_64_BIT):
    submit_file_dispatcher = {
        Sandbox.HYBRID_ANALYSIS.label: hybrid_analysis_client.submit_file(file, analyse_environment),
        Sandbox.FILE_SCAN_IO.label: file_scan_io_client.submit_file(file),
        Sandbox.VIRUS_TOTAL.label: virus_total_client.submit_file(file)
    }
    return submit_file_dispatcher[sandbox]


def submit_url_to_scan(url: str, sandbox: str, analyse_environment=HybridAnalysisAPIEnvironment.WIN7_64_BIT):
    submit_url_dispatcher = {
        Sandbox.HYBRID_ANALYSIS.label: hybrid_analysis_client.submit_url(url, analyse_environment),
        Sandbox.FILE_SCAN_IO.label: file_scan_io_client.submit_url(url),
    }
    return submit_url_dispatcher[sandbox]


def get_analyse_id(submission_response, sandbox):
    get_analyse_id_dispatcher = {
        Sandbox.HYBRID_ANALYSIS.label: submission_response["job_id"],
    }

    return get_analyse_id_dispatcher[sandbox]


def save_analyse_overview(target: Target, sandbox: str, submission_response):

    analyse_id = get_analyse_id(submission_response, sandbox)

    get_overview_dispatcher = {
        Sandbox.HYBRID_ANALYSIS.label: hybrid_analysis_client.report_id_summary(analyse_id),
    }

    overview_report = get_overview_dispatcher[sandbox]

    save_overview_dispatcher = {
        Sandbox.HYBRID_ANALYSIS.label: save_hybrid_analysis_overview(target.id, overview_report)
    }

    return save_overview_dispatcher[sandbox]
