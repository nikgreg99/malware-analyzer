from time import sleep

from .wrapper.hybrid_analysis import HybridAnalysisAPI, HybridAnalysisAPIEnvironment
from .wrapper.file_scan_io import FileScanIOAPI
from .wrapper.virus_total import VirusTotalAPI
from .wrapper.cuckoo import CuckooAPI
from analyzer.models import Sandbox, Target
from .save_analyse import save_scan_overview_with_hybrid_analysis, save_file_overview_with_filescanIO

hybrid_analysis_client = HybridAnalysisAPI("nsf7gnhmada16034ttqw85ul11b17cf0rbb80wigee02e9c9fahch10if8caa7d5")
file_scan_io_client = FileScanIOAPI("zmtIFIh9vKhRNqNS5njousQCCPLQfat6pqEmIoNS")
cuckoo_client = CuckooAPI(host="193.246.121.179", port=8090, api_key="RY_aUdiMgUJNuu8ZeSukWQ")
virus_total_client = VirusTotalAPI("dfddc81d41862fe2a03bc73475d15fbb004993a7f7cc4b9948711d38769a7d3e")


class SubmitURL(object):

    method_name = "submit_url_"

    def submit_url_Cuckoo(self, url: str):
        return cuckoo_client.submit_url(url)

    def submit_url_Hybrid_Analysis(self, url: str, environment_id):
        return hybrid_analysis_client.submit_url(url, environment_id)

    def submit_url_FIle_Scan_IO(self, url: str):
        return file_scan_io_client.submit_url(url)

    def submit_url_virus_total(self, url: str):
        return file_scan_io_client.submit_url(url)

    def submit_url(self, url: str, sandbox: Sandbox, environment_id: HybridAnalysisAPIEnvironment):
        sandbox_type = self.method_name + sandbox
        if environment_id is None:
            method = getattr(self, sandbox_type, lambda: 'Invalid sandbox')
            return method(url)
        else:
            return self.submit_url_Hybrid_Analysis(url,environment_id)


def submit_file_to_scan(file: str, sandbox: str, analyse_environment=HybridAnalysisAPIEnvironment.WIN7_64_BIT):
    submit_file_dispatcher = {
        Sandbox.HYBRID_ANALYSIS.label: hybrid_analysis_client.submit_file(file, analyse_environment),
        Sandbox.FILE_SCAN_IO.label: file_scan_io_client.submit_file(file),
    }
    return submit_file_dispatcher[sandbox]


def submit_url_to_scan(url: str, sandbox: str, analyse_environment=HybridAnalysisAPIEnvironment.WIN7_64_BIT):
    submit_url_dispatcher = {
        Sandbox.HYBRID_ANALYSIS.label: hybrid_analysis_client.submit_url(url, analyse_environment),
        Sandbox.FILE_SCAN_IO.label: file_scan_io_client.submit_url(url),
    }
    return submit_url_dispatcher[sandbox]


def download_report_analyse(job_id: str, sandbox: str, report_format: str):
    if sandbox == Sandbox.HYBRID_ANALYSIS:
        return hybrid_analysis_client.report_id_download_type(job_id, report_format)

    if sandbox == Sandbox.FILE_SCAN_IO:
        return file_scan_io_client.download_report(job_id, report_format)


def get_analyse_id(submission_response, sandbox):
    if sandbox == Sandbox.HYBRID_ANALYSIS:
        return submission_response["job_id"]
    if sandbox == Sandbox.FILE_SCAN_IO:
        return submission_response["flow_id"]
    if sandbox == Sandbox.VIRUS_TOTAL:
        return submission_response["data"]["id"]
    if sandbox == Sandbox.CUCKOO:
        return submission_response["task_id"]


def save_analyse_overview(target: Target, sandbox: str, submission_response):
    job_id = get_analyse_id(submission_response, sandbox)

    if sandbox == Sandbox.FILE_SCAN_IO:
        sleep(35)  # previously
        overview_report = file_scan_io_client.get_reports_by_id(job_id)
    if sandbox == Sandbox.HYBRID_ANALYSIS:
        overview_report = hybrid_analysis_client.report_id_summary(job_id)

    if sandbox == Sandbox.FILE_SCAN_IO:
        analyse = save_file_overview_with_filescanIO(target, overview_report)
    if sandbox == Sandbox.HYBRID_ANALYSIS:
        analyse = save_scan_overview_with_hybrid_analysis(target, overview_report)

    return analyse
