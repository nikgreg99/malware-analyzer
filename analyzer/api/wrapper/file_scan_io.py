import requests
import urllib.parse

from .utils import connect
from storage.upload import upload_storage


# STATUS OK
class FileScanIOAPI:
    base_url = "https://www.filescan.io/api/"

    def __init__(self, api_key: str):
        self.session = requests.Session()
        self.session.headers = {
            'X-Api-Key': api_key
        }

    @staticmethod
    def create(api_key=None):
        return FileScanIOAPI(api_key)

    def submit_file(self, file_name=None, data=None):

        file = {'file': (file_name, upload_storage.open(file_name, 'rb'))}

        json_request = connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "scan/file"),
                               data=data, files=file)

        return json_request

    def submit_url(self, url=None, data=None):
        option = dict()
        option.update({'url': url})
        return connect(self.session, "POST", urllib.parse.urljoin(self.base_url, "scan/url"),
                       data=option)

    def get_reports_by_id(self, flow_id: str, data=dict()):
        data['filter'] = ['f:all', 'fd:fileDownloadResults', 'fd:extractedUrls', "o:all"]
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "scan/{}/report".format(flow_id)),
                       params=data)

    def download_report(self, report_id, report_format: str):
        if report_id is not None:
            return connect(self.session, "GET",
                           urllib.parse.urljoin(self.base_url, "reports/{}/download").format(report_id),
                           params={'format': report_format})

    def get_specif_report(self, report_id: str, file_hash: str):
        if report_id is not None or file_hash is not None:
            return connect(self.session, "GET",
                           urllib.parse.urljoin(self.base_url, "reports/{}/{}".format(report_id, file_hash)))

    def get_single_file(self, hash=None):
        if hash is not None:
            return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "files/{}".format(hash)))

    def get_feed_atom(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "feed/atom"))

    def get_feed_info(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "feed/info"))

    def get_yara_status(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "users/stat/yara"))

    def get_yara_info(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "/users/info/yara"))

    def get_mitre_status(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "users/stat/mitre"))

    def get_system_info(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "system/info"))

    def get_system_config(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "system/config"))

    def signal_groups(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "system/signal-groups"))

    def get_mitre_data(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "system/mitre"))

    def get_openapi_json(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "openapi.json"))

    def get_api_sitemap(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "sitemap"))

    def get_api_doc(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "docs"))

    def get_api_doc_styles(self):
        return connect(self.session, "GET", urllib.parse.urljoin(self.base_url, "docs/styles"))
