import os

from django.conf import settings
from django.core.files.base import ContentFile
from django.shortcuts import redirect, render
from django.urls import reverse
from django.views.generic.base import View

from analyzer.api.dispatcher import submit_file_to_scan, submit_url_to_scan, save_analyse_overview
from analyzer.api.wrapper import HybridAnalysisAPIEnvironment
from analyzer.models import Target, Sandbox
from analyzer.models.target import TargetType

from storage import uploads_storage

environments = {
    'Windows 7 32 bit': HybridAnalysisAPIEnvironment.WIN7_32_BIT,
    'Windows 7 64 bit': HybridAnalysisAPIEnvironment.WIN7_64_BIT,
    'Linux Ubuntu 16.04 (64 bit)': HybridAnalysisAPIEnvironment.LINUX_UBUNTU_16_04_64_BIT,
    'Android Static Analysis': HybridAnalysisAPIEnvironment.ANDROID_STATIC_ANALYSIS,
    'Windows 32 bit HWP Support': HybridAnalysisAPIEnvironment.WIN7_32_BIT_HWP_SUPPORT
}


def create_submission_context():
    context = {
        'sandboxes': Sandbox.labels,
        'environments': environments.keys()
    }
    return context


def submit_target(target_name: str, target_type: TargetType):
    target = Target.objects.all().filter(name=target_name, type=target_type)
    if not target.exists():
        target = Target(name=target_name, type=target_type)
        target.save()
    else:
        target = target.get()

    return target


def upload_file(request, file_name: str):
    full_filename = os.path.join(settings.MEDIA_ROOT, file_name)
    f_out = uploads_storage.open(full_filename, "wb+")
    file_content = ContentFile(request.FILES["file"].read())
    for chunk in file_content.chunks():
        f_out.write(chunk)


class SubmitFile(View):

    def get(self, request, *args, **kwargs):
        context = create_submission_context()
        return render(request, "analyzer/submit_file.html", context)

    def post(self, request, *args, **kwargs):
        file_name = request.FILES["file"].name
        sandbox = request.POST["sandbox"]
        upload_file(request, file_name)
        target = submit_target(file_name, TargetType.FILE)

        if sandbox != Sandbox.HYBRID_ANALYSIS:
            submission_response = submit_file_to_scan(file_name, sandbox)
        else:
            submission_response = submit_file_to_scan(file_name, sandbox, environments[request.POST["environment"]])

        analyse = save_analyse_overview(target, sandbox, submission_response)
        return redirect(reverse('analyzer:overviewAnalyse', args=(analyse.id,)), analyse)


class SubmitURL(View):

    def get(self, request, *args, **kwargs):
        context = create_submission_context()
        return render(request, "analyzer/submit_url.html", context)

    def post(self, request, *args, **kwargs):
        url = request.POST["url"]
        sandbox = request.POST["sandbox"]
        target = submit_target(url, TargetType.URL)

        if sandbox != Sandbox.HYBRID_ANALYSIS:
            submission_response = submit_url_to_scan(url, sandbox)
        else:
            submission_response = submit_url_to_scan(url, sandbox, environments[request.POST["environment"]])

        analyse = save_analyse_overview(target, sandbox, submission_response)
        return redirect(reverse('analyzer:overviewAnalyse', args=(analyse.id,)), analyse)
