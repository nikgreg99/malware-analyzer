import os
from django.conf import settings
from django.core.files.base import ContentFile
from django.shortcuts import redirect, render
from django.urls import reverse
from django.views.generic.base import View

from analyzer.api.save_report import save_analysis_file, save_analysis_sha_256, save_analysis_url
from analyzer.api.wrapper import HybridAnalysisAPIEnvironment
from analyzer.forms import FileUploadForm
from analyzer.models import Target, Sandbox
from analyzer.models.target import TargetType

from storage.upload import upload_storage

environments: dict[str, HybridAnalysisAPIEnvironment] = {
    'Windows 7 32 bit': HybridAnalysisAPIEnvironment.WIN7_32_BIT,
    'Windows 7 64 bit': HybridAnalysisAPIEnvironment.WIN7_64_BIT,
    'Linux Ubuntu 16.04 (64 bit)': HybridAnalysisAPIEnvironment.LINUX_UBUNTU_16_04_64_BIT,
    'Android Static Analysis': HybridAnalysisAPIEnvironment.ANDROID_STATIC_ANALYSIS,
    'Windows 32 bit HWP Support': HybridAnalysisAPIEnvironment.WIN7_32_BIT_HWP_SUPPORT
}


def create_submission_context():
    context = {
        'sandboxes': Sandbox.labels,
        'environments': environments.keys()
    }
    return context


# STATUS: OK
def write_file(request, file_name: str):
    full_filename = os.path.join(settings.MEDIA_ROOT, file_name)
    f_out = upload_storage.open(full_filename, "wb+")
    file_content = ContentFile(request.FILES["file"].read())
    for chunk in file_content.chunks():
        f_out.write(chunk)


class Submit(View):
    def post(self, request, *args, **kwargs):
        file_form = FileUploadForm(request.POST, request.FILES or None)
        sha_256 = request.POST['SHA-256']
        url = request.POST['url']
        if file_form.is_valid():
            file_name = request.FILES['file'].name
            write_file(request, file_name)
            file_target, created = Target.objects.get_or_create(name=file_name, type=TargetType.FILE)
            report = save_analysis_file(file_target)
        if sha_256 and not sha_256.isspace():
            sha_256_target, created = Target.objects.get_or_create(name=sha_256, type=TargetType.SHA_256)
            report = save_analysis_sha_256(sha_256_target)

        if url and not url.isspace():
            url_target, created = Target.objects.get_or_create(name=url, type=TargetType.URL)
            report = save_analysis_url(url_target)

        return redirect(reverse('analyzer:overviewAnalyse', args=(report.id, "combined")), report)

