import mimetypes
import os.path
from glob import glob

from django.http import HttpResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.conf import settings
from analyzer.api.api_dispatchers import download_report_analyse
from analyzer.models import Overview, Sandbox


report_format_dispatcher = {
    Sandbox.HYBRID_ANALYSIS:  ['json', 'html', 'pdf', 'maec', 'stix', 'misp', 'misp-json', 'openioc'],
    Sandbox.FILE_SCAN_IO: ['html', 'pdf', 'stix', 'misp'],
    Sandbox.CUCKOO: ['json', 'html', 'all', 'dropped', 'packaged_files']
}


def get_file_in_response(content, file_path, file_name):
    mime_type = mimetypes.guess_type(file_path)
    response = HttpResponse(content, content_type=mime_type)
    response["Content-Disposition"] = "attachment; filename=%s" % file_name
    return response


def get_analyse_overview(request, analyse_id):
    overview = get_object_or_404(Overview, pk=analyse_id)
    context = {
        'overview': overview,
        'report_formats': report_format_dispatcher.get(overview.sandbox)
    }
    return render(request, "analyzer/overview.html", context)


def download_sample(request, analyse_id):
    analyse = Overview.objects.filter(pk=analyse_id).get()
    file = analyse.target.name
    file.close()
    return get_file_in_response(file, file.url, file.name)


def download_report(request, analyse_id, report_format):
    analyse = Overview.objects.filter(pk=analyse_id).get()
    job_id = analyse.job_id
    file_name = job_id + "." + report_format
    file_path = settings.REPORT_ROOT + "/" + file_name
    if not os.path.exists(file_path):
        response = download_report_analyse(job_id, analyse.sandbox, report_format)
        file = open(file_path, 'wb')
        content = response.content
        file.write(content)
    else:
        file = open(file_path, 'rb')
        content = file.read()
    response = get_file_in_response(content, file_path, file_name)
    file.close()
    return response


def delete_analyse(request, analyse_id):
    analyse = Overview.objects.filter(pk=analyse_id).get()
    regex = settings.REPORT_ROOT + "/" + analyse.job_id + ".*"
    for file in glob(regex):
        os.remove(file)
    analyse.delete()
    response = redirect("/analyzer")
    return response
